#include <iostream>
#include <time.h>
#include <cmath>

using namespace std;


void init2DMass(int** mass2d, size_t rows, size_t cols);
void print2DMass(int** mass2d, size_t rows, size_t cols);
void gx_fun(int** old_mass, int** new_mass, size_t rows, size_t cols);
void gy_fun(int** old_mass, int** new_mass, size_t rows, size_t cols);
void print2DMassDouble(double** mass2d, size_t rows, size_t cols);






int main()
{
	srand(time(NULL));
	size_t rows, cols;
	cout << "Write rows: ";
	cin >> rows;
	cout << "Write cols: ";
	cin >> cols;
	int** arr = new int* [rows];
	for (int i = 0; i < rows; i++) {
		arr[i] = new int[cols];
	}
	int** gx = new int* [rows];
	for (int i = 0; i < rows; i++) {
		gx[i] = new int [cols];
	}
	int** gy = new int* [rows];
	for (int i = 0; i < rows; i++) {
		gy[i] = new int [cols];
	}
	init2DMass(arr, rows, cols);
	gx_fun(arr, gx, rows, cols);
	gy_fun(arr, gy, rows, cols);
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			arr[i][j] = sqrt((pow(gy[i][j], 2) + pow(gx[i][j], 2)));
		}
	}

	print2DMass(arr, rows, cols);
	
	
	
	
	return 0;
}

void init2DMass(int** mass2d, size_t rows, size_t cols)
{
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			mass2d[i][j] = (rand() % 255) + 1;
		}
	}
}

void print2DMass(int** mass2d, size_t rows, size_t cols)
{
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			cout << mass2d[i][j] << " ";
			
		}
		cout << endl;
	}
}

void gx_fun(int** old_mass, int** new_mass, size_t rows, size_t cols)
{
	for (int i = 0; i < rows; i++) {
		if (i != 0 && i < (rows - 1)) {
			for (int j = 0; j < cols; j++) {
				if (j != 0 && j < (cols - 1)) {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i - 1][j] + old_mass[i - 1][j + 1] - old_mass[i + 1][j - 1] - 2 * old_mass[i + 1][j] - old_mass[i + 1][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 2 * old_mass[i - 1][j] + old_mass[i - 1][j + 1] - 2 * old_mass[i + 1][j] - old_mass[i + 1][j + 1];

				}
				else {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i - 1][j] - old_mass[i + 1][j - 1] - 2 * old_mass[i + 1][j];
				}
				
			}
		}
		else if (i == 0) {
			for (int j = 0; j < cols; j++) {
				if (j != 0 || j < (cols - 1)) {
					new_mass[i][j] = 0 - old_mass[i + 1][j - 1] - 2 * old_mass[i + 1][j] - old_mass[i + 1][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 0 - 2 * old_mass[i + 1][j] - old_mass[i + 1][j + 1];
				}
				else {
					new_mass[i][j] = 0 - old_mass[i + 1][j - 1] - 2 * old_mass[i + 1][j];
				}
				
			}
		}
		else {
			for (int j = 0; j < cols; j++) {
				if (j != 0 || j < (cols - 1)) {
					new_mass[i][j] = old_mass[i - 1][j - 1] + (2 * old_mass[i - 1][j]) + old_mass[i - 1][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 2 * old_mass[i - 1][j] + old_mass[i - 1][j + 1];

				}
				else {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i - 1][j];
				}

			}

		}


	}
}

void gy_fun(int** old_mass, int** new_mass, size_t rows, size_t cols)
{
	for (int i = 0; i < rows; i++) {
		if (i != 0 && i < (rows - 1)) {
			for (int j = 0; j < cols; j++) {
				if (j != 0 && j < (cols - 1)) {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i][j - 1] + old_mass[i + 1][j - 1] - old_mass[i -
						1][j + 1] - 2 * old_mass[i][j + 1] - old_mass[i + 1][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 0 - old_mass[i -
						1][j + 1] - 2 * old_mass[i][j + 1] - old_mass[i + 1][j + 1];
				}
				else {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i][j - 1] + old_mass[i + 1][j - 1];
				}
			}
		}
		else if (i == 0) {
			for (int j = 0; j < cols; j++) {
				if (j != 0 && j < (cols - 1)) {
					new_mass[i][j] = 2 * old_mass[i][j - 1] + old_mass[i + 1][j - 1] - 2 * old_mass[i][j + 1] - old_mass[i + 1][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 0 - 2 * old_mass[i][j + 1] - old_mass[i + 1][j + 1];
				}
				else {
					new_mass[i][j] = 2 * old_mass[i][j - 1] + old_mass[i + 1][j - 1];
				}
			}
		}
		else {
			for (int j = 0; j < cols; j++) {
				if (j != 0 && j < (cols - 1)) {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i][j - 1] - old_mass[i -
						1][j + 1] - 2 * old_mass[i][j + 1];
				}
				else if (j == 0) {
					new_mass[i][j] = 0 - old_mass[i -
						1][j + 1] - 2 * old_mass[i][j + 1];
				}
				else {
					new_mass[i][j] = old_mass[i - 1][j - 1] + 2 * old_mass[i][j - 1];
				}
			}
		}

	}
}
void print2DMassDouble(double** mass2d, size_t rows, size_t cols)
{
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			cout << mass2d[i][j] << " ";

		}
		cout << endl;
	}
}
