#include<iostream>
#include<time.h>


using namespace std;





void init2DArray(int** mas2d, size_t rows, size_t cols);
void print2DArray(int** mas2d, size_t rows, size_t cols);
void multiplyArrays(int** mas1, int** mas2, int** mass_result, size_t rows, size_t cols);
int promejutok(int** mas1, int** mas2, size_t cols, size_t counter_rows, size_t counter_cols);
void min_of_element(int** mas, size_t rows, size_t cols);


int main()
{
	srand(time(NULL));
	size_t rows1, cols1, rows2, cols2;// количество столбцов и строчек
	cout << "Write matrix1 rows: ";
	cin >> rows1;
	cout << "Write matrix1 cols: ";
	cin >> cols1;
	cout << "Write matrix2 rows: ";
	cin >> rows2;
	cout << "Write matrix2 cols: ";
	cin >> cols2;
	if ((rows1 == cols2) || (rows2 == cols1)) {

	
		int** matrix1;

		matrix1 = new int* [rows1];

		for (int i = 0; i < rows1; i++) {
			matrix1[i] = new int[cols1];
		}

		int** matrix2;

		matrix2 = new int* [rows2];

		for (int j = 0; j < rows2; j++) {
			matrix2[j] = new int[cols2];
		}

		init2DArray(matrix1, rows1, cols1);//заполнение массива
		print2DArray(matrix1, rows1, cols1);//вывод массива
	
		init2DArray(matrix2, rows2, cols2);//заполнение массива
		print2DArray(matrix2, rows2, cols2);//вывод массива

		if (rows2 == cols1) {
			int** matrix_result;
			matrix_result = new int* [rows1];
			for (size_t i = 0; i < rows1; i++) {
				matrix_result[i] = new int[cols2];
			}
			multiplyArrays(matrix1, matrix2, matrix_result, rows1, cols2);
			print2DArray(matrix_result, rows1, cols2);
			min_of_element(matrix_result, rows1, cols2);
		}
		else {
			int** matrix_result;
			matrix_result = new int* [rows2];
			for (size_t i = 0; i < rows2; i++) {
				matrix_result[i] = new int[cols1];
			}
			multiplyArrays(matrix2, matrix1, matrix_result, rows2, cols1);
			print2DArray(matrix_result, rows2, cols1);
			min_of_element(matrix_result, rows2, cols1);
		}

	}
	else {
		cout << "We can`t multiply this matrixis" << endl;
	}
	return 0;

}

void init2DArray(int** mas2d, size_t rows, size_t cols)
{
	for (size_t i = 0; i < rows; ++i)
	{
		for (size_t j = 0; j < cols; ++j)
		{
			mas2d[i][j] = rand();
		}
	}
}


void print2DArray(int** mas2d, size_t rows, size_t cols)
{
	for (size_t i = 0; i < rows; ++i)
	{
		for (size_t j = 0; j < cols; ++j)
		{
			cout << " " << mas2d[i][j];

		}
		cout << endl;
	}
	cout << endl;
}

void multiplyArrays(int** mas1, int** mas2, int** mass_result, size_t rows, size_t cols)
{
	for (size_t i = 0; i < rows; i++) {
		for (size_t j = 0; j < cols; j++) {
			mass_result[i][j] = promejutok(mas1, mas2, cols, i, j);
		}
	}
}

int promejutok(int** mas1, int** mas2, size_t cols, size_t counter_rows, size_t counter_cols){
	int num = 0;
	
	for (size_t k = 0; k < cols; k++) { 
		num += mas1[counter_rows][k] * mas2[k][counter_cols];
	}
	return num;
}

void min_of_element(int** mas, size_t rows, size_t cols)
{
	int min = mas[0][0];
	for (size_t i = 0; i < rows; i++) {
		for (size_t j = 0; j < cols; j++) {
			if (min > mas[i][j]) {
				min = mas[i][j];
			}
		}
	}
	cout << min << endl;
}
